import Head from 'next/head';
import type { GetStaticProps, NextPage } from 'next';
import Hero from '@root/src/sections/hero/normal';
import Footer from '@root/src/layout/footer';
import { client } from '@root/src/backend/client';
import { ISanityBlog } from '@root/src/backend/queries/pages/blog/interface';
import Container from '@components/container';
import CustomPortableText from '@components/custom-portable-text';
import { allBlogsQuery, blogQuery } from '@root/src/backend/queries/pages/blog';
import { useRouter } from 'next/router';

interface IProps {
  data: ISanityBlog;
}

/**
 * Makes Next.js aware of all the slugs it can expect at this route
 */
export async function getStaticPaths() {
  const pages = await client.fetch(allBlogsQuery);
  return {
    paths: pages.map((slug: string) => {
      return slug;
    }),
    fallback: true,
  };
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  if (params && typeof params.slug == 'string') {
    /**
     * Params returns the slug after '/blogs/' so we have add it back in.
     * Params also reverts uri encoding, so we have to redo it.
     */
    const slug = `/blogs/${encodeURIComponent(params.slug)}`;

    const data = await client.fetch<ISanityBlog>(blogQuery, { slug });

    if (!data) {
      return {
        notFound: true,
        revalidate: 10,
      };
    }

    return {
      props: { data },
      revalidate: 10,
    };
  }
  return {
    notFound: true,
    revalidate: 10,
  };
};

const BlogDetails: NextPage<IProps> = ({ data }) => {
  const router = useRouter();

  if (router.isFallback) {
    return (
      <div className="flex h-screen w-screen items-center justify-center">
        Loading...
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>{data.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero
        title={data.title}
        description={data.description}
        buttons={{
          buttonLeft: { label: 'Go To Home Page', href: '/' },
          buttonRight: { label: 'Client Side Example', href: '/client-side' },
        }}
      />
      <div className="section-padding-primary">
        <Container>
          <div className="my-4">
            <CustomPortableText content={data.blogContent} />
          </div>
        </Container>
      </div>
      <Footer />
    </>
  );
};

export default BlogDetails;
